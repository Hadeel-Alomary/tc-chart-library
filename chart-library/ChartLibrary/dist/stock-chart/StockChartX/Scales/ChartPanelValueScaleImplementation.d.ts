import { ChartPanel } from '../ChartPanels/ChartPanel';
import { IPadding, Rect } from '../Graphics/Rect';
import { Control } from '../Controls/Control';
import { IStateProvider } from '../Data/IStateProvider';
import { Chart } from '../Chart';
import { Projection } from './Projection';
import { INumberFormat } from '../Data/NumberFormat';
import { IValueScaleCalibrator } from './ValueScaleCalibrator';
import { ValueScale } from './ValueScale';
import { GestureArray } from '../Gestures/GestureArray';
import { IPoint } from '../Graphics/ChartPoint';
import { ChartPanelValueScale, IChartPanelValueScaleConfig, IChartPanelValueScaleState } from './ChartPanelValueScale';
import { AxisScaleType } from './axis-scale-type';
export declare class ChartPanelValueScaleImplementation extends Control implements IStateProvider<IChartPanelValueScaleState>, ChartPanelValueScale {
    private _panel;
    get chartPanel(): ChartPanel;
    get chart(): Chart;
    private _projectionFrame;
    get projectionFrame(): Rect;
    private _options;
    private _projection;
    private _leftFrame;
    get leftFrame(): Rect;
    private _rightFrame;
    get rightFrame(): Rect;
    private _leftContentFrame;
    private _rightContentFrame;
    private range;
    private _formatter;
    get formatter(): INumberFormat;
    set formatter(value: INumberFormat);
    private _minVisibleValue;
    get minVisibleValue(): number;
    set minVisibleValue(value: number);
    private _maxVisibleValue;
    get maxVisibleValue(): number;
    set maxVisibleValue(value: number);
    get minAllowedValue(): number;
    set minAllowedValue(value: number);
    get maxAllowedValue(): number;
    set maxAllowedValue(value: number);
    get minAllowedValueRatio(): number;
    set minAllowedValueRatio(value: number);
    get maxAllowedValueRatio(): number;
    set maxAllowedValueRatio(value: number);
    get minValueRangeRatio(): number;
    set minValueRangeRatio(value: number);
    get maxValueRangeRatio(): number;
    set maxValueRangeRatio(value: number);
    get majorTickMarkLength(): number;
    set majorTickMarkLength(value: number);
    get minorTickMarkLength(): number;
    set minorTickMarkLength(value: number);
    get axisScale(): AxisScaleType;
    set axisScale(value: AxisScaleType);
    get projection(): Projection;
    get padding(): IPadding;
    private _calibrator;
    get calibrator(): IValueScaleCalibrator;
    set calibrator(value: IValueScaleCalibrator);
    get actualTheme(): import("../Theme").ValueScaleTheme;
    get chartValueScale(): ValueScale;
    constructor(config: IChartPanelValueScaleConfig);
    protected _initGestures(): GestureArray;
    private _updateFormatter;
    private _setMinVisibleValue;
    private _setMaxVisibleValue;
    private _index;
    needsAutoScale(): boolean;
    setNeedsAutoScale(): void;
    autoScale(): void;
    formatValue(value: number): string;
    formatAllDigitsValue(value: number): string;
    preferredWidth(): number;
    hitTest(point: IPoint): any;
    scrollOnPixels(pixels: number): boolean;
    scrollOnValue(valueOffset: number): boolean;
    zoomOnPixels(pixels: number): boolean;
    zoomOnValue(valueOffset: number): boolean;
    _zoomOrScrollWithUpdate(offset: number, func: (value: number) => void): void;
    saveState(): IChartPanelValueScaleState;
    loadState(stateOrConfig: IChartPanelValueScaleState | IChartPanelValueScaleConfig): void;
    layout(frame: Rect): void;
    private _layoutContentFrames;
    clip(): boolean;
    draw(): void;
    private _handleDoubleClickGesture;
    private _handlePanGesture;
    private _handleMouseWheelGesture;
    private _valueOffset;
    private _canSetVisibleValueRange;
}
//# sourceMappingURL=ChartPanelValueScaleImplementation.d.ts.map