import { IDateScaleCalibrator } from "./DateScaleCalibrator";
import { IPadding, IRect, Rect } from "../Graphics/Rect";
import { ChartComponent, IChartComponentConfig } from '../Controls/ChartComponent';
import { DateScalePanel } from "./DateScalePanel";
import { Projection } from "./Projection";
import { DataSeries, IMinMaxValues } from "../Data/DataSeries";
import { WindowEvent } from "../Gestures/Gesture";
import { DateScale, IDateScaleState } from "./DateScale";
export declare class DateScaleImplementation extends ChartComponent implements DateScale {
    private _topPanel;
    get topPanel(): DateScalePanel;
    private _bottomPanel;
    get bottomPanel(): DateScalePanel;
    private _zoomed;
    get zoomed(): boolean;
    set zoomed(zoomed: boolean);
    get topPanelCssClass(): string;
    get bottomPanelCssClass(): string;
    get topPanelVisible(): boolean;
    get bottomPanelVisible(): boolean;
    private _projection;
    get projection(): Projection;
    private _projectionFrame;
    get projectionFrame(): Rect;
    private _columnWidth;
    private _calibrator;
    get calibrator(): IDateScaleCalibrator;
    set calibrator(value: IDateScaleCalibrator);
    private _formatter;
    private _options;
    private _firstVisibleIndex;
    get firstVisibleIndex(): number;
    private _lastVisibleIndex;
    get lastVisibleIndex(): number;
    get firstVisibleRecord(): number;
    set firstVisibleRecord(record: number);
    get lastVisibleRecord(): number;
    set lastVisibleRecord(value: number);
    get visibleDateRange(): IMinMaxValues<Date>;
    get useManualHeight(): boolean;
    set useManualHeight(value: boolean);
    get manualHeight(): number;
    set manualHeight(value: number);
    get minVisibleRecords(): number;
    set minVisibleRecords(value: number);
    get rightAdditionalSpaceRatio(): number;
    set rightAdditionalSpaceRatio(value: number);
    get scrollKind(): string;
    set scrollKind(value: string);
    get zoomKind(): string;
    set zoomKind(value: string);
    get zoomMode(): string;
    set zoomMode(value: string);
    get actualTheme(): import("../Theme").DateScaleTheme;
    get columnsCount(): number;
    get columnWidth(): number;
    get maxAllowedRecord(): number;
    get majorTickMarkLength(): number;
    set majorTickMarkLength(value: number);
    get minorTickMarkLength(): number;
    set minorTickMarkLength(value: number);
    get textPadding(): IPadding;
    set textPadding(value: IPadding);
    get allowPartialRecords(): boolean;
    set allowPartialRecords(value: boolean);
    get showGridSessionLines(): boolean;
    set showGridSessionLines(value: boolean);
    get gridSessionLinesColor(): string;
    private _moreHistoryRequested;
    constructor(config: IChartComponentConfig);
    protected _subscribeEvents(): void;
    protected _unsubscribeEvents(): void;
    _calculateProjectionMetrics(): void;
    setNeedsAutoScale(): void;
    needsAutoScale(): boolean;
    autoScale(): void;
    getDateDataSeries(): DataSeries;
    handleEvent(event: WindowEvent): boolean;
    formatDate(date: Date): string;
    scrollOnPixels(pixels: number): boolean;
    canScroll(): boolean;
    scrollOnRecords(records: number): boolean;
    zoomOnPixels(leftPixels: number, rightPixels?: number): boolean;
    zoomOnRecords(leftRecords: number, rightRecords?: number): boolean;
    _handleZoom(pixels: number): void;
    private _requestMoreHistoryIfNeed;
    saveState(): IDateScaleState;
    loadState(stateOrConfig: IDateScaleState | IChartComponentConfig): void;
    _canSetVisibleRecord(record: number): boolean;
    layoutScalePanel(chartFrame: Rect): Rect;
    layout(frame: Rect, projectionFrame: Rect): void;
    _canvasStartX(): number;
    _textDrawBounds(): IRect;
    draw(): void;
}
//# sourceMappingURL=DateScaleImplementation.d.ts.map