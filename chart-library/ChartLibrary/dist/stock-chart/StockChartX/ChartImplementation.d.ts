import '../StockChartX.UI/jQueryExtension';
import '../StockChartX.UI/scxNumericField';
import { EventableObject } from './Utils/EventableObject';
import { Drawing, IDrawingState } from './Drawings/Drawing';
import { DateScale, IDateScaleState } from './Scales/DateScale';
import { IValueScaleConfig, ValueScale } from './Scales/ValueScale';
import { ChartPanelsContainer } from './ChartPanels/ChartPanelsContainer';
import { DataManager, IBar, IBarDataSeries } from './Data/DataManager';
import { ISize, Rect } from './Graphics/Rect';
import { IIndicatorOptions, Indicator } from './Indicators/Indicator';
import { ValueMarker } from './Scales/ValueMarker';
import { IPriceStyle, IPriceStyleState } from './PriceStyles/PriceStyle';
import { CrossHair, ICrossHairState } from './CrossHair';
import { SelectionMarker } from './SelectionMarker';
import { ChartPanel } from './ChartPanels/ChartPanel';
import { DataSeries } from './Data/DataSeries';
import { ZoomTool } from './Tools/ZoomTool';
import { MeasurementTool } from './Tools/MeasurementTool';
import { ChartAnnotation } from './ChartAnnotations/ChartAnnotation';
import { ChartPanelSplitter } from './ChartPanels/ChartPanelSplitter';
import { ChartTheme } from './Theme';
import { Chart, ChartOptions, ICanvasImageCallback, IChartConfig, IInstrument } from './Chart';
import { IChartPanelsContainerOptions } from './ChartPanels/ChartPanelsContainerImplementation';
import { CategoryNews, ChartAlert } from '../../services/index';
import { AxisScaleType } from './Scales/axis-scale-type';
import { TradingOrder, TradingPosition } from '../../services/trading/broker/models';
import { IWaitingBarConfig, Plot } from '..';
import { ThemeType } from './ThemeType';
import { MovingAverageOptions } from './MovingAverageOptions';
export declare class ChartImplementation extends EventableObject implements Chart {
    static get version(): string;
    private _themeType;
    private _copyBuffer;
    private _container;
    get container(): JQuery;
    private _rootDiv;
    get rootDiv(): JQuery;
    private _dateScale;
    get dateScale(): DateScale;
    private _valueScales;
    get valueScales(): ValueScale[];
    get valueScale(): ValueScale;
    private _chartPanelsContainer;
    get chartPanelsContainer(): ChartPanelsContainer;
    private _dataManager;
    get dataManager(): DataManager;
    private _timeInterval;
    get timeInterval(): number;
    set timeInterval(value: number);
    private _marketTradingMinutesCountInDays;
    get marketTradingMinutesCount(): number;
    set marketTradingMinutesCount(value: number);
    private _chartPanelsFrame;
    get chartPanelsFrame(): Rect;
    private _instrument;
    get instrument(): IInstrument;
    set instrument(value: IInstrument);
    private _indicators;
    get indicators(): Indicator[];
    private _valueMarker;
    get valueMarker(): ValueMarker;
    private _options;
    private _movingAverageOptions;
    get movingAverageOptions(): MovingAverageOptions;
    get locale(): string;
    set locale(value: string);
    get keyboardEventsEnabled(): boolean;
    set keyboardEventsEnabled(value: boolean);
    private _numberOfDigitFormat;
    get numberOfDigitFormat(): number;
    set numberOfDigitFormat(value: number);
    get theme(): ChartTheme;
    set theme(value: ChartTheme);
    get showBarInfoInTitle(): boolean;
    set showBarInfoInTitle(value: boolean);
    get showPanelOptions(): boolean;
    set showPanelOptions(value: boolean);
    private _priceStyle;
    get priceStyle(): IPriceStyle;
    set priceStyle(value: IPriceStyle);
    get priceStyleKind(): string;
    set priceStyleKind(value: string);
    private _hoverRecord;
    get hoveredRecord(): number;
    private _crossHair;
    get crossHair(): CrossHair;
    private _selectedObject;
    get selectedObject(): Plot | Drawing;
    set selectedObject(value: Plot | Drawing);
    private _selectionMarker;
    get selectionMarker(): SelectionMarker;
    private _preFullWindowSize;
    private _showDrawings;
    get showDrawings(): boolean;
    set showDrawings(value: boolean);
    private _state;
    get state(): number;
    set state(value: number);
    get size(): ISize;
    set size(value: ISize);
    get mainPanel(): ChartPanel;
    get recordCount(): number;
    get firstVisibleRecord(): number;
    set firstVisibleRecord(value: number);
    get lastVisibleRecord(): number;
    set lastVisibleRecord(value: number);
    get firstVisibleIndex(): number;
    get lastVisibleIndex(): number;
    get chartPanels(): ChartPanel[];
    get crossHairType(): string;
    set crossHairType(value: string);
    getZoomedDateRange(): {
        start: Date;
        end: Date;
    };
    private _waitingBar;
    private _updateAnimation;
    private _readOnly;
    get readOnly(): boolean;
    private _zoomTool;
    get zoomTool(): ZoomTool;
    private _measurementTool;
    get measurementTool(): MeasurementTool;
    get magnetRatio(): number;
    set magnetRatio(ratio: number);
    private _isInteractive;
    get isInteractive(): boolean;
    private _hostId;
    get hostId(): string;
    private customChartPanelObjectsManager;
    private continuousDrawing;
    private lastUsedDrawingClassName;
    allowsAutoScaling: boolean;
    constructor(config: IChartConfig);
    isVisible(): boolean;
    getBounds(): Rect;
    selectObject(obj: Plot | Drawing): boolean;
    addValueScale(valueScale: ValueScale): ValueScale;
    removeValueScale(valueScale: ValueScale | ValueScale[]): void;
    addIndicators(indicators: number | number[] | Indicator | Indicator[] | IIndicatorOptions | IIndicatorOptions[]): Indicator | Indicator[];
    removeIndicators(indicators?: Indicator | Indicator[], removePanelIfNoPlots?: boolean): void;
    updateIndicators(): void;
    saveIndicatorsState(): IIndicatorOptions[];
    loadIndicatorsState(state: IIndicatorOptions[]): void;
    saveDrawingsState(): IDrawingState[];
    updateTradingDrawings(orders: TradingOrder[], position: TradingPosition): void;
    updateChartAlertDrawings(alerts: ChartAlert[]): void;
    addNewsAnnotations(newsList: CategoryNews[]): void;
    loadDrawingsState(state: IDrawingState[]): void;
    deleteDrawings(): void;
    clearDrawingsOnLoadState(): void;
    saveState(): IChartState;
    loadState(state: IChartState): void;
    _restoreValueScales(state: IChartState): void;
    startUserDrawing(drawing: Drawing): void;
    cancelUserDrawing(): void;
    _finishUserDrawing(drawing: Drawing): void;
    enableContinuousDrawing(): void;
    disableContinuousDrawing(): void;
    setNeedsAutoScaleAll(): void;
    get isInFullWindowMode(): boolean;
    toggleFullWindow(): void;
    resizeCanvas(): void;
    setNeedsLayout(): void;
    layout(): void;
    draw(): void;
    update(): void;
    setNeedsUpdate(needsAutoScale?: boolean): void;
    _onUpdateAnimationCallback(): void;
    updateSplitter(splitter: ChartPanelSplitter): void;
    destroy(): void;
    _updatePriceStylePlotDataSeriesIfNeeded(): void;
    showWaitingBar(config: IWaitingBarConfig): void;
    hideWaitingBar(): void;
    _handleWindowResize(event: JQueryEventObject): void;
    _handleKeyDown(event: JQueryEventObject): void;
    _copyDrawing(drawing: Drawing): void;
    _pasteDrawing(): void;
    _handleMouseEvents(event: JQueryEventObject): boolean;
    saveImageWithSize(saveCallback: ICanvasImageCallback, screenshotCanvasSize: ISize): void;
    resetDefaultSettings(): void;
    private getDefaultTheme;
    saveAsDefaultSettings(): void;
    applyDarkTheme(): void;
    applyLightTheme(): void;
    _loadOptionsState(optionsOrConfig: ChartOptions | IChartConfig): void;
    _layoutHtmlElements(width: number, height: number): void;
    _applyTheme(): void;
    _subscribeEvents(readOnly: boolean): void;
    _updateHoverRecord(x: number): void;
    _handleFullWindowResize(): void;
    barDataSeries(): IBarDataSeries;
    getCommonDataSeries(): IBarDataSeries;
    addDataSeries(dataSeries: string | DataSeries, replaceIfExists?: boolean): DataSeries;
    removeDataSeries(dataSeries: string | DataSeries): void;
    clearDataSeries(dataSeries: string | DataSeries): void;
    trimDataSeries(maxLength: number): void;
    getDataSeries(name: string): DataSeries;
    primaryDataSeries(suffix: string, symbol?: string): DataSeries;
    primaryBarDataSeries(symbol?: string): IBarDataSeries;
    findDataSeries(suffix: string): DataSeries;
    appendBars(bars: IBar | IBar[]): void;
    addChartPanel(index?: number, heightRatio?: number, shrinkMainPanel?: boolean): ChartPanel;
    findPanelAt(y: number): ChartPanel;
    setNeedsAutoScale(): void;
    setAllowsAutoScaling(enable: boolean): void;
    setAxisScale(axisScaleType: AxisScaleType): void;
    getAxisScale(): AxisScaleType;
    scrollOnPixels(pixels: number): void;
    scrollOnRecords(records: number): void;
    zoomOnPixels(pixels: number): void;
    zoomOnRecords(records: number): void;
    handleZoom(pixels: number): void;
    recordRange(firstRecord: number, lastRecord?: number): {
        firstVisibleRecord: number;
        lastVisibleRecord: number;
    };
    dateRange(startDate?: Date, endDate?: Date): {
        startDate: Date;
        endDate: Date;
    };
    updateComputedDataSeries(): void;
    startZooming(): void;
    finishZooming(): void;
    isZooming(): boolean;
    cancelZoomingIfNeeded(): void;
    startMeasuring(): void;
    finishMeasuring(): void;
    isMeasuring(): boolean;
    cancelMeasuringIfNeeded(): void;
    onData(priceData: {
        time: string;
        open: number;
        high: number;
        low: number;
        close: number;
        volume: number;
    }[], zoomStartDate: string, maintainZoom: boolean, zoomRange: {
        start: Date;
        end: Date;
    }, splits: {
        value: number;
        date: string;
    }[], showBonusShares: boolean): void;
    private periodZoomCounterForMobile;
    resetToPeriodDefaultZoomForMobile(): void;
    getIndicatorById(id: string): Indicator;
    updateCustomSourceIndicators(sourceIndicatorId: string): void;
    removeChildIndicators(sourceIndicatorId: string): void;
    moveIndicatorIndexToEnd(indicator: Indicator): void;
    toggleDateScaleGridSessionLinesVisibility(): void;
    isVisibleDateScaleGridSessionLines(): boolean;
    private addCustomChartPanelObject;
    private addExecutedOrders;
    private addSplitsAnnotation;
    private addNews;
    getDrawingById(id: string): Drawing;
    updateDrawingsLocking(locked: boolean): void;
    private getIndicatorsThatDependOnAnotherIndicator;
    private canApplySavedZoom;
    getValueByGlobalPoint(x: number, y: number): number;
    getPanelIndexByGlobalPoint(x: number, y: number): number;
    onVisibilityChanged(): void;
    private fillMainDataSeries;
    private applySelectedPeriodZoom;
    private applySavedSpace;
    private addExtraSpaceRightOfChart;
    private getAdditionalNeededRecords;
    private checkContinuousDrawing;
    private isValidDrawingChartPoints;
    private addArrayOfIndicators;
    getChartAnnotations(): ChartAnnotation[];
    private _cutOffDate;
    setCutOffDate(cutoffDate: string): void;
    getCutOffDate(): string;
    private _cutOffDataLoaded;
    markCutoffDataAsLoaded(): void;
    cutOffDataIsLoaded(): boolean;
    private mapThemeForBackwardCompatibility;
    getThemeType(): ThemeType;
}
export interface IChartState {
    chart: ChartOptions;
    priceStyle: IPriceStyleState;
    dateScale: IDateScaleState;
    valueScales: IValueScaleConfig[];
    crossHair: ICrossHairState;
    chartPanelsContainer: IChartPanelsContainerOptions;
    indicators: IIndicatorOptions[];
    drawings: IDrawingState[];
}
//# sourceMappingURL=ChartImplementation.d.ts.map